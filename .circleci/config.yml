# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
orbs:
  slack: circleci/slack@4.1
jobs:
  build:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    working_directory:  ~/ci
    steps:
      - add_ssh_keys:
          fingerprints:
            - "44:53:e9:7c:97:7d:8a:33:b4:fc:2d:0a:38:5b:8e:62"
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - save_cache:
          key: 'dependencies-{{ checksum "pom.xml" }}'
          paths:
            - ~/.m2 
      - run:
          name: List all content from source code
          command: pwd && ls -la
      - run:
          name: Install dependencies
          command: mvn dependency:go-offline        
      - run:
          name: Validate
          command: mvn -B validate
      - run:
          name: Compile
          command: mvn -B compile                
      - run:
          name: Test
          command: mvn test
      - run:
          name: Check code coverage
          command: mvn clean test
      - run:
          name: Install
          command: mvn clean install
      - run:
          name: Validate WAR file
          command: pwd && ls -la ./target && chmod 755 ./target/LoginWebApp-1.war    
          
      - run:
          name: Deploy to tomcat server over SSH
          command: |
            ls -la ./target
            scp -o "StrictHostKeyChecking=no" ./home/java_web_app_circleci/target/LoginWebApp-1.war ec2-user@ec2-3-95-250-166.us-east-1a.compute-1.amazonaws.com:/tmp
            ssh -o "StrictHostKeyChecking=no" ec2-user@ec2-3-95-250-166.us-east-1a.compute-1.amazonaws.com "sudo mv /home/java_web_app_circleci/target/LoginWebApp-1.war /opt/tomcat/webapps/ && pwd && sudo ls -la /opt/tomcat/webapps/"
          
      - run:
          name: Deploy artifact to nexus
          command: |
            curl -u admin:fptproject -X GET 'http://13.215.61.77:8081/service/rest/v1/components?repository=test'
            curl -v -u admin:fptproject -X POST 'http://13.215.61.77:8081/service/rest/v1/components?repository=store-artifact' -F maven2.groupId=com.google.guava -F maven2.artifactId=guava -F maven2.version=24.0-jre -F maven2.asset1=/home/circleci/project/target/LoginWebApp-1.war -F maven2.asset1.extension=war      
      
      - slack/notify:
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: pass
          template: success_tagged_deploy_1
workflows:
  build:
    jobs:
      - build:
          filters:
            branches:
              only: sit
#
